//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace GettingStartedClient.CalcServiceReference {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://Microsoft.SetviceModel.Samples", ConfigurationName="CalcServiceReference.ICalc")]
    public interface ICalc {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Microsoft.SetviceModel.Samples/ICalc/Add", ReplyAction="http://Microsoft.SetviceModel.Samples/ICalc/AddResponse")]
        double Add(double a, double b);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Microsoft.SetviceModel.Samples/ICalc/Add", ReplyAction="http://Microsoft.SetviceModel.Samples/ICalc/AddResponse")]
        System.Threading.Tasks.Task<double> AddAsync(double a, double b);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Microsoft.SetviceModel.Samples/ICalc/Subtract", ReplyAction="http://Microsoft.SetviceModel.Samples/ICalc/SubtractResponse")]
        double Subtract(double a, double b);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Microsoft.SetviceModel.Samples/ICalc/Subtract", ReplyAction="http://Microsoft.SetviceModel.Samples/ICalc/SubtractResponse")]
        System.Threading.Tasks.Task<double> SubtractAsync(double a, double b);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Microsoft.SetviceModel.Samples/ICalc/Multiply", ReplyAction="http://Microsoft.SetviceModel.Samples/ICalc/MultiplyResponse")]
        double Multiply(double a, double b);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Microsoft.SetviceModel.Samples/ICalc/Multiply", ReplyAction="http://Microsoft.SetviceModel.Samples/ICalc/MultiplyResponse")]
        System.Threading.Tasks.Task<double> MultiplyAsync(double a, double b);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Microsoft.SetviceModel.Samples/ICalc/Divide", ReplyAction="http://Microsoft.SetviceModel.Samples/ICalc/DivideResponse")]
        double Divide(double a, double b);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Microsoft.SetviceModel.Samples/ICalc/Divide", ReplyAction="http://Microsoft.SetviceModel.Samples/ICalc/DivideResponse")]
        System.Threading.Tasks.Task<double> DivideAsync(double a, double b);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Microsoft.SetviceModel.Samples/ICalc/Power", ReplyAction="http://Microsoft.SetviceModel.Samples/ICalc/PowerResponse")]
        double Power(double number, [System.ServiceModel.MessageParameterAttribute(Name="power")] double power1);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Microsoft.SetviceModel.Samples/ICalc/Power", ReplyAction="http://Microsoft.SetviceModel.Samples/ICalc/PowerResponse")]
        System.Threading.Tasks.Task<double> PowerAsync(double number, double power);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ICalcChannel : GettingStartedClient.CalcServiceReference.ICalc, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CalcClient : System.ServiceModel.ClientBase<GettingStartedClient.CalcServiceReference.ICalc>, GettingStartedClient.CalcServiceReference.ICalc {
        
        public CalcClient() {
        }
        
        public CalcClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public CalcClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CalcClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CalcClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public double Add(double a, double b) {
            return base.Channel.Add(a, b);
        }
        
        public System.Threading.Tasks.Task<double> AddAsync(double a, double b) {
            return base.Channel.AddAsync(a, b);
        }
        
        public double Subtract(double a, double b) {
            return base.Channel.Subtract(a, b);
        }
        
        public System.Threading.Tasks.Task<double> SubtractAsync(double a, double b) {
            return base.Channel.SubtractAsync(a, b);
        }
        
        public double Multiply(double a, double b) {
            return base.Channel.Multiply(a, b);
        }
        
        public System.Threading.Tasks.Task<double> MultiplyAsync(double a, double b) {
            return base.Channel.MultiplyAsync(a, b);
        }
        
        public double Divide(double a, double b) {
            return base.Channel.Divide(a, b);
        }
        
        public System.Threading.Tasks.Task<double> DivideAsync(double a, double b) {
            return base.Channel.DivideAsync(a, b);
        }
        
        public double Power(double number, double power1) {
            return base.Channel.Power(number, power1);
        }
        
        public System.Threading.Tasks.Task<double> PowerAsync(double number, double power) {
            return base.Channel.PowerAsync(number, power);
        }
    }
}
